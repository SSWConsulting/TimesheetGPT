@page "/"

@using Microsoft.Identity.Web
@using Microsoft.Graph
@using MudBlazor
@using TimesheetGPT.Core.Classes
@using TimesheetGPT.Core.Services
@using TimesheetGPT.WebUI.Services
@inject GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject TimesheetService TimesheetService

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h1">Generate Timesheet</MudText>
    @if (!string.IsNullOrEmpty(_name))
    {
        <MudText Typo="Typo.subtitle1">
            Hi @_name, what day would you like to generate a timesheet for?
        </MudText>
    }
    <MudStack Spacing="3" Row="true" Class="mt-6">
        <MudDatePicker Label="Timesheet day"
                       @bind-Date="_date"
                       DisableToolbar="true"
                       Variant="Variant.Outlined"
                       IsDateDisabledFunc="@((DateTime dt) => dt.Date > DateTime.Now.Date)"
                       Editable="true"/>
        
        <MudTextField @bind-Value="_extraPrompt" Label="Additional prompts" Placeholder="Ignore emails about..." Variant="Variant.Outlined"/>

        @if (!_loading)
        {
            <MudButton FullWidth="false"
                       ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.GeneratingTokens"
                       @onclick="GenerateTimesheet">
                Generate
            </MudButton>
        }
        @if (_loading)
        {
            <MudStack AlignItems="AlignItems.Center">
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Class="ma-2"/>
            </MudStack>
        }
    </MudStack>
</MudContainer>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="max-height: 50%">
    <MudStack Row="true" Justify="Justify.SpaceAround">
        @if (_emails != null && !_loading)
        {
            <ResultCard Heading="Emails sent">
                <ul>
                    @foreach (var email in _emails.Where(m => !string.IsNullOrEmpty(m)))
                    {
                        <li><MudText>@email</MudText></li>
                    }
                </ul>
            </ResultCard>
        }

        @if (!_loading && _meetings != null)
        {
            <ResultCard Heading="Meetings">
                <ul>
                    @foreach (var meeting in _meetings)
                    {
                        string formatted;

                        var timeSpan = meeting.Length;
                        if (timeSpan.Hours > 0)
                        {
                            formatted = $"{timeSpan.Hours} hours {timeSpan.Minutes} minutes";
                        }
                        else
                        {
                            formatted = $"{timeSpan.Minutes} minutes";
                        }

                        <MudPaper Class="ma-2 pa-2">
                            <MudText Typo="Typo.body2">@meeting.Name</MudText>
                            <MudText Typo="Typo.body1">@formatted</MudText>
                        </MudPaper>
                    }
                </ul>
            </ResultCard>
        }

        @if (!_loading && _summaryText != null)
        {
            <ResultCard Heading="Summary" HasCopyButton="true" CopyText="@_summaryText">
                <MudText Typo="Typo.body1"></MudText>
                <MudMarkdown Value="@_summaryText"/>
            </ResultCard>
        }
    </MudStack>
</MudContainer>


@code {
    bool _loading;
    IList<string>? _emails;
    IList<Meeting>? _meetings;
    string? _summaryText;
    DateTime? _date = DateTime.Today;
    string? _name;
    string? _extraPrompt;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var user = await GraphServiceClient.Me.GetAsync();
            _name = user?.DisplayName;
        }
        catch (Exception ex) //TODO: straight from the template, but should be more specific?
        {
            ConsentHandler.HandleException(ex);
        }
    }

    private async Task GenerateTimesheet()
    {
        _loading = true;
        try
        {
            var dateTime = _date ?? DateTime.Today;
            var summary = await TimesheetService.GenerateSummary(dateTime, GraphServiceClient, _extraPrompt ?? "");

            _emails = summary.Emails;
            _meetings = summary.Meetings;
            _summaryText = summary.Summary;
        }
        catch (Exception ex) //TODO: straight from the template, but should be more specific?
        {
            ConsentHandler.HandleException(ex);
        }

        _loading = false;
    }
}