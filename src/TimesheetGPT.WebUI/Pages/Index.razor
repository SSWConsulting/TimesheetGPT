@page "/"
@using TimesheetGPT.WebUI.Models

@inject GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject TimesheetService TimesheetService

<MudContainer MaxWidth="MaxWidth.Medium" Style="padding-bottom: 2rem;">
    <MudText Typo="Typo.h1">Generate Timesheet</MudText>
    <MudText Typo="Typo.subtitle1">
        Hi @_name, what day would you like to generate a timesheet for?
    </MudText>
    <MudGrid Justify="Justify.SpaceBetween" Style="align-items: center">
        <MudItem xs="12" md="4">
            <MudDatePicker Label="Timesheet day"
                           @bind-Date="_date"
                           DisableToolbar="true"
                           Variant="Variant.Outlined"
                           IsDateDisabledFunc="@((DateTime dt) => dt.Date > DateTime.Now.Date)"
                           Editable="true"/>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudTextField @bind-Value="_extraPrompt"
                          Label="Additional prompts"
                          Placeholder="Ignore emails about..."
                          Variant="Variant.Outlined"/>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudButton Class=""
                       FullWidth="true"
                       Color="Color.Secondary"
                       ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.PostAdd"
                       Disabled="_loading"
                       @onclick="GenerateTimesheet">
                @if (_hasBeenGenerated)
                {
                    <MudText>Regenerate</MudText>
                }
                else
                {
                    <MudText>Generate</MudText>
                }
            </MudButton>
        </MudItem>

        @if (_additionalNotesError)
        {
            <MudAlert Severity="Severity.Error">Additional notes too long. You have @_additionalNotes.Length characters. We only accept 400 max.</MudAlert>
        }

        <MudExpansionPanel Text="Additional notes">
            <MudItem xs="12">
                <MudTextField @bind-Value="_additionalNotes"
                              Variant="Variant.Outlined"
                              Placeholder="I walked the dog for Adam..."
                              Lines="7"/>
            </MudItem>
        </MudExpansionPanel>
    </MudGrid>
</MudContainer>

<Results ViewModel="@_results" />

@code {
    bool _loading;
    DateTime? _date = DateTime.Today;
    string? _name = "...";
    string? _extraPrompt;
    string _additionalNotes = string.Empty;
    bool _hasBeenGenerated;
    ResultVm _results = new ResultVm();

    bool _additionalNotesError;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var user = await GraphServiceClient.Me.GetAsync();
            _name = user?.DisplayName;
        }
        catch (Exception ex) //TODO: straight from the template, but should be more specific?
        {
            ConsentHandler.HandleException(ex);
        }
    }

    private async Task GenerateTimesheet()
    {
        _loading = true;
        _results.Loading = true;
        try
        {
            _additionalNotesError = false;
            _additionalNotesError = CheckAdditionalNotesLength();
            if (_additionalNotesError)
            {
                return;
            }
            var dateTime = _date ?? DateTime.Today;
            
            _results = new ResultVm
            {
                Loading = _loading,
            };
            
            var summary = await TimesheetService.GenerateSummary(dateTime, _extraPrompt ?? "", _additionalNotes);

            _results.Meetings = summary.Meetings;
            _results.Emails = summary.Emails;
            _results.SummaryText = summary.Text;

            _hasBeenGenerated = true;
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
        finally
        {
            _results.Loading = false;
            _loading = false;
        }

    }

    private bool CheckAdditionalNotesLength()
    {
        return _additionalNotes.Length > 400;
    }
}