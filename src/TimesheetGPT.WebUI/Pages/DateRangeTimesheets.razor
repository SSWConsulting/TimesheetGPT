@page "/date-range"
@using TimesheetGPT.WebUI.Models


@inject GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject TimesheetService TimesheetService

<MudContainer MaxWidth="MaxWidth.Medium" Style="padding-bottom: 2rem;">
    <MudText Typo="Typo.h1">Generate Timesheet</MudText>
    <MudText Typo="Typo.subtitle1">
        Hi @_name, what days would you like to generate a timesheet for?
    </MudText>
    <MudGrid Justify="Justify.SpaceBetween" Style="align-items: center">
        <MudItem xs="12" md="4">
            <MudDateRangePicker Label="Basic range picker (editable)" Editable="true" @bind-DateRange="_dateRange"/>

        </MudItem>
        <MudItem xs="12" md="4">
            <MudTextField @bind-Value="_extraPrompt"
                          Label="Additional prompts"
                          Placeholder="Ignore emails about..."
                          Variant="Variant.Outlined"/>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudButton Class=""
                       FullWidth="true"
                       Color="Color.Secondary"
                       ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.PostAdd"
                       Disabled="_loading"
                       @onclick="GenerateTimesheet">
                @if (_hasBeenGenerated)
                {
                    <MudText>Regenerate</MudText>
                }
                else
                {
                    <MudText>Generate</MudText>
                }
            </MudButton>
        </MudItem>

        @if (_additionalNotesError)
        {
            <MudAlert Severity="Severity.Error">Additional notes too long. You have @_additionalNotes.Length characters. We only accept 400 max.</MudAlert>
        }

        <MudExpansionPanel Text="Additional notes">
            <MudItem xs="12">
                <MudTextField @bind-Value="_additionalNotes"
                              Variant="Variant.Outlined"
                              Placeholder="I walked the dog for Adam..."
                              Lines="7"/>
            </MudItem>
        </MudExpansionPanel>
    </MudGrid>
</MudContainer>

@foreach (var res in _results)
{
    <Results ViewModel="@res"/>
}

@code {
    bool _loading;
    string? _name = "...";
    string? _extraPrompt;
    string _additionalNotes = string.Empty;
    bool _hasBeenGenerated;

    private readonly IList<ResultVm> _results = new List<ResultVm>();

    private DateRange _dateRange = new(
        DateTime.Now.Date.AddDays(-(int)DateTime.Now.DayOfWeek + (int)DayOfWeek.Monday),
        DateTime.Now.Date.AddDays(-(int)DateTime.Now.DayOfWeek + (int)DayOfWeek.Friday)
        );


    bool _additionalNotesError;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var user = await GraphServiceClient.Me.GetAsync();
            _name = user?.DisplayName;
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    private async Task GenerateTimesheet()
    {
        _loading = true;
        try
        {
            _additionalNotesError = false;
            _additionalNotesError = CheckAdditionalNotesLength();
            if (_additionalNotesError)
            {
                return;
            }

            await Parallel.ForEachAsync(EachDay(_dateRange.Start ?? DateTime.Now, _dateRange.End ?? DateTime.Now), async (date, token) =>
            {
                var result = new ResultVm
                {
                    Loading = true
                };
                
                _results.Add(result);
                
                var summary = await TimesheetService.GenerateSummary(date, _extraPrompt ?? "", _additionalNotes, token);

                result.Meetings = summary.Meetings;
                result.Emails = summary.Emails;
                result.SummaryText = summary.Text;
                result.Loading = false;

                _hasBeenGenerated = true;
            });
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
        finally
        {
            _loading = false;
        }

    }

    private bool CheckAdditionalNotesLength()
    {
        return _additionalNotes.Length > 400;
    }

    static IEnumerable<DateTime> EachDay(DateTime start, DateTime end)
    {
        for (var day = start; day <= end; day = day.AddDays(1))
        {
            yield return day;
        }
    }
}