@inherits LayoutComponentBase

<MudThemeProvider @ref="@_mudThemeProvider" 
                  Theme="_theme" 
                  @bind-IsDarkMode="@_isDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<PageTitle>TimesheetGPT</PageTitle>

<MudLayout>
    <MudAppBar>
        <MudText Typo="Typo.h5">
            <MudStack AlignItems="AlignItems.Center" Row="true">
                <MudIcon Icon="@Icons.Material.Outlined.ViewTimeline"/>TimesheetGPT
            </MudStack>
        </MudText>
        <MudSpacer/>
        @switch (themePreference)
        {
            case ThemePreference.Light:
                <MudTooltip Duration="1000" Text="Switch to Dark Theme">
                    <MudIconButton Icon="@Icons.Material.Rounded.DarkMode" Color="Color.Inherit" OnClick="@(() => SetThemePreference(ThemePreference.Dark))"/>
                </MudTooltip>

                break;

            case ThemePreference.Dark:
                <MudTooltip Duration="1000" Text="Switch to System Theme">
                    <MudIconButton Icon="@Icons.Material.Rounded.Devices" Color="Color.Inherit" OnClick="@(() => SetThemePreference(ThemePreference.System))"/>
                </MudTooltip>

                break;

            case ThemePreference.System:
                <MudTooltip Duration="1000" Text="Switch to Light Theme">
                    <MudIconButton Icon="@Icons.Material.Rounded.LightMode" Color="Color.Inherit" OnClick="@(() => SetThemePreference(ThemePreference.Light))"/>
                </MudTooltip>

                break;

            default:
                goto case ThemePreference.Light;
        }
    </MudAppBar>
    <MudMainContent>
        <div class="pa-3">
            @Body
        </div>
    </MudMainContent>
</MudLayout>

@code {
    private MudThemeProvider? _mudThemeProvider;
    ThemePreference themePreference;
    private bool _isDarkMode;
    private bool systemIsDarkMode;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            systemIsDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        systemIsDarkMode = newValue;
        SetThemePreference(themePreference);
        StateHasChanged();
    }

    private readonly MudTheme _theme = new()
    {
        Typography = new Typography()
        {
            Body2 = new Body2()
            {
                FontWeight = 600,
                FontSize = "1rem"
            }
        },
        Palette = new PaletteLight
        {
            Primary = "#AAA",
            Secondary = "#CC4141",
            Error = "#CC4141",
            AppbarBackground = "#323332",
            BackgroundGrey = "#f9fbfc"
        },
        PaletteDark = new PaletteDark
        {
            Primary = "#AAA",
            Secondary = "#CC4141",
            Error = "#CC4141",
            Background = "#333333",
            AppbarBackground = "#323332",
            Surface = "#333333",
            BackgroundGrey = "#3E4446"
        }
    };

    private void SetThemePreference(ThemePreference preference)
    {
        themePreference = preference;

        _isDarkMode = preference switch 
        {        
            ThemePreference.Light => false,
            ThemePreference.Dark => true,
            ThemePreference.System => systemIsDarkMode,
            _ => true
            };

        StateHasChanged();
    }
}