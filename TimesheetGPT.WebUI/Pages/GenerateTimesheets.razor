@page "/timesheets"

@using Microsoft.Identity.Web
@using Microsoft.Graph
@using TimesheetGPT.Application
@using TimesheetGPT.Application.Classes
@inject GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler


<MudContainer MaxWidth="MaxWidth.Small">

    <h1>Generate Timesheet</h1>
    <MudStack Spacing="3">
        @if (!string.IsNullOrEmpty(name))
        {
            <MudText>
                Hi @name, what day would you like to generate a timesheet for?
            </MudText>
        }
        <MudDatePicker Label="Timesheet day"
                       @bind-Date="                                _date"
                       DisableToolbar="true"
                       Editable="true"/>

        @if (!_loading)
        {
            <MudButton FullWidth="false"
                       ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.GeneratingTokens"
                       @onclick="GenerateTimesheet">
                Generate
            </MudButton>
        }
        @if (_loading)
        {
            <MudStack AlignItems="AlignItems.Center">
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Class="ma-2"/>
            </MudStack>
        }
        else if (_emails != null && !_loading)
        {
            <h2>Emails sent</h2>
            <ul>
                @foreach (var email in _emails.Where(m => !string.IsNullOrEmpty(m)))
                {
                    <li>@email</li>
                }
            </ul>

        }

        @if (!_loading && _meetings != null)
        {
            <h2>Meetings</h2>
            <ul>
                @foreach (var meeting in _meetings)
                {
                    string formatted;

                    var timeSpan = meeting.Length;
                    if (timeSpan.Hours > 0)
                    {
                        formatted = $"{timeSpan.Hours} hours {timeSpan.Minutes} minutes";
                    }
                    else
                    {
                        formatted = $"{timeSpan.Minutes} minutes";
                    }

                    <MudPaper Class="ma-2">
                        <MudText>@meeting.Name</MudText>
                        <MudText>@formatted</MudText>
                    </MudPaper>
                }
            </ul>
        }
    </MudStack>
</MudContainer>

@code {
    bool _loading;
    IList<string>? _emails;
    IList<Meeting>? _meetings;
    DateTime? _date = DateTime.Today;
    string? name;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var user = await GraphServiceClient.Me.GetAsync();
            name = user?.DisplayName;
        }
        catch (Exception ex) //TODO: straight from the template, but should be more specific?
        {
            ConsentHandler.HandleException(ex);
        }
    }

    private async Task GenerateTimesheet()
    {
        Console.WriteLine("Generating timesheet");
        _loading = true;
        try
        {
            IGraphService service = new GraphService(GraphServiceClient);

            var dateTime = _date ?? DateTime.Today;
            _emails = await service.GetEmailSubjects(dateTime);
            _meetings = await service.GetMeetings(dateTime);
        }
        catch (Exception ex) //TODO: straight from the template, but should be more specific?
        {
            ConsentHandler.HandleException(ex);
        }
        
        // Summarise with GPT
            // 1. make openaiapi client
            // 2. get summary
        
        
        
        
        _loading = false;
    }
}